#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
"""
import asyncio
import time
import logging
from typing import Dict, Optional, Set
from telegram import Bot
from models import user_settings, websocket_connections, alert_tracking, last_check_time, last_prices
from config import API_TIMEOUT, UPDATE_INTERVAL
from utils import get_crypto_price

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
_pending_requests: Dict[str, asyncio.Future] = {}
_request_lock = asyncio.Lock()

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MIN_CHECK_INTERVAL = UPDATE_INTERVAL  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)

async def get_crypto_price_optimized(base: str, quote: str) -> Optional[float]:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤.
    –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã, –∂–¥–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    symbol = f"{base}{quote}".upper()
    
    async with _request_lock:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã, –∂–¥–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if symbol in _pending_requests:
            logger.debug(f"–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {symbol} (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)")
            return await _pending_requests[symbol]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        future = asyncio.Future()
        _pending_requests[symbol] = future
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            price = await get_crypto_price(base, quote)
            future.set_result(price)
            return price
        except Exception as e:
            future.set_exception(e)
            raise
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ pending –∑–∞–ø—Ä–æ—Å–æ–≤
            _pending_requests.pop(symbol, None)

async def start_price_monitoring(chat_id: int, base: str, quote: str, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    symbol = f"{base}{quote}".upper()
    tracking_key = (chat_id, symbol)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏–º–≤–æ–ª–∞
    if tracking_key in websocket_connections:
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
    if tracking_key not in alert_tracking:
        alert_tracking[tracking_key] = {
            "alerted": False,  # –û–±—â–∏–π —Ñ–ª–∞–≥ - –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            "last_price": None
        }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    last_check_time[tracking_key] = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    task = asyncio.create_task(monitor_price(chat_id, base, quote, bot))
    websocket_connections[tracking_key] = task
    
    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

async def monitor_price(chat_id: int, base: str, quote: str, bot: Bot) -> None:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—É –ø–∞—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    symbol = f"{base}{quote}".upper()
    tracking_key = (chat_id, symbol)
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    while True:
        try:
            current_time = time.time()
            time_since_last_check = current_time - last_check_time[tracking_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if time_since_last_check < MIN_CHECK_INTERVAL:
                sleep_time = MIN_CHECK_INTERVAL - time_since_last_check
                await asyncio.sleep(sleep_time)
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check_time[tracking_key] = current_time
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            current_price = await get_crypto_price_optimized(base, quote)
            
            if current_price is None:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                await asyncio.sleep(MIN_CHECK_INTERVAL)
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            last_prices[tracking_key] = current_price
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_pair = None
            for pair in user_settings.get(chat_id, []):
                if pair.base == base and pair.quote == quote:
                    user_pair = pair
                    break
            
            if not user_pair:
                logger.error(f"–ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if user_pair.min_price is not None or user_pair.max_price is not None:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
                asyncio.create_task(check_price_alerts(chat_id, symbol, current_price, user_pair, bot))
            
        except asyncio.CancelledError:
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {symbol} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            await asyncio.sleep(MIN_CHECK_INTERVAL)

async def check_price_alerts(chat_id: int, symbol: str, current_price: float, pair, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.
    """
    tracking_key = (chat_id, symbol)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω—ã
    if "last_price" not in alert_tracking[tracking_key] or alert_tracking[tracking_key]["last_price"] is None:
        alert_tracking[tracking_key]["last_price"] = current_price
        return  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
    
    last_price = alert_tracking[tracking_key]["last_price"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 0.01%)
    price_change_threshold = 0.0001  # 0.01%
    price_changed = abs(current_price - last_price) / last_price > price_change_threshold
    
    if not price_changed:
        return  # –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
    alert_tracking[tracking_key]["last_price"] = current_price
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—à–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: —Ü–µ–Ω–∞={current_price:.8f}, –º–∏–Ω={pair.min_price}, –º–∞–∫—Å={pair.max_price}")
    logger.debug(f"–§–ª–∞–≥ –∞–ª–µ—Ä—Ç–∞: alerted={alert_tracking[tracking_key]['alerted']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—à–ª–∞ –ª–∏ —Ü–µ–Ω–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω (–º–∏–Ω–∏–º—É–º –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º)
    price_out_of_range = False
    alert_message = ""
    
    if pair.min_price is not None and current_price <= pair.min_price:
        price_out_of_range = True
        alert_message = f"üîî –ê–õ–ï–†–¢! {symbol}\n"
        alert_message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}\n"
        alert_message += f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {pair.min_price:.8f}\n"
        alert_message += f"üìä –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞!"
        logger.info(f"üîî –¢–†–ò–ì–ì–ï–† –ê–õ–ï–†–¢–ê: {symbol} —Ü–µ–Ω–∞ {current_price:.8f} <= –º–∏–Ω–∏–º—É–º–∞ {pair.min_price:.8f}")
        
    elif pair.max_price is not None and current_price >= pair.max_price:
        price_out_of_range = True
        alert_message = f"üîî –ê–õ–ï–†–¢! {symbol}\n"
        alert_message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}\n"
        alert_message += f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {pair.max_price:.8f}\n"
        alert_message += f"üìä –¶–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞!"
        logger.info(f"üîî –¢–†–ò–ì–ì–ï–† –ê–õ–ï–†–¢–ê: {symbol} —Ü–µ–Ω–∞ {current_price:.8f} >= –º–∞–∫—Å–∏–º—É–º–∞ {pair.max_price:.8f}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –ò —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if price_out_of_range and not alert_tracking[tracking_key]["alerted"]:
        try:
            await bot.send_message(chat_id=chat_id, text=alert_message)
            logger.info(f"‚úÖ –ê–õ–ï–†–¢ –û–¢–ü–†–ê–í–õ–ï–ù –¥–ª—è {symbol}: {current_price:.8f}")
            alert_tracking[tracking_key]["alerted"] = True
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ê–õ–ï–†–¢–ê –¥–ª—è {symbol}: {e}")
    elif price_out_of_range and alert_tracking[tracking_key]["alerted"]:
        logger.info(f"üîî {symbol}: —Ü–µ–Ω–∞ {current_price:.8f} –≤—Å–µ –µ—â–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω)")

async def stop_price_monitoring(chat_id: int, base: str, quote: str) -> None:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    symbol = f"{base}{quote}".upper()
    tracking_key = (chat_id, symbol)
    
    if tracking_key in websocket_connections:
        task = websocket_connections[tracking_key]
        task.cancel()
        del websocket_connections[tracking_key]
        
        # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        if tracking_key in alert_tracking:
            del alert_tracking[tracking_key]
        
        if tracking_key in last_check_time:
            del last_check_time[tracking_key]
        
        logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    else:
        logger.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol} –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

async def get_current_price_for_pair(base: str, quote: str) -> Optional[float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ø–∞—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    return await get_crypto_price(base, quote)