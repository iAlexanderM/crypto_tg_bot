#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞.
"""
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from models import CryptoPair, UserState, user_settings, user_states
import logging
import asyncio
from keyboards import (
    get_main_keyboard, get_base_coin_keyboard, get_quote_coin_keyboard,
    get_cancel_inline_keyboard, 
    get_pairs_list_keyboard, get_pair_actions_keyboard
)
from monitoring import start_price_monitoring, stop_price_monitoring
from utils import validate_price
from decorators import rate_limit
from storage import save_user_data
from config import RATE_LIMIT

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ (–≤—ã–∑–æ–≤–æ–≤/–ø–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
COMMAND_LIMITS = {
    'base': (5, 60),    # 5 –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    'quick': (30, 60),   # 30 –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)
    'normal': (RATE_LIMIT, 60),  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É
}

@rate_limit(calls=COMMAND_LIMITS['quick'][0], period=COMMAND_LIMITS['quick'][1])
async def cmd_help(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    help_text = (
        "ü§ñ *Crypto Price Alert Bot*\n\n"
        "üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:* –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "üëÅÔ∏è –ú–æ–∏ –ø–∞—Ä—ã - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–∏\n"
        "üìà –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø–∞—Ä—ã\n\n"
        "üìà *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏ –∫–æ—Ç–∏—Ä—É–µ–º—É—é –≤–∞–ª—é—Ç—ã\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "4. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω\n\n"
        "‚öôÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üëÅÔ∏è –ú–æ–∏ –ø–∞—Ä—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏\n"
        "- –ù–∞–∂–º–∏—Ç–µ 'üìà –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã' –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"
    )
    
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

@rate_limit(calls=COMMAND_LIMITS['quick'][0], period=COMMAND_LIMITS['quick'][1])
async def cmd_start(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    import logging
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    logger.info(f"üöÄ cmd_start –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_settings:
        user_settings[chat_id] = []
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}")
    if chat_id not in user_states:
        user_states[chat_id] = UserState()
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
        "üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:* –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_main_keyboard()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

@rate_limit(calls=COMMAND_LIMITS['base'][0], period=COMMAND_LIMITS['base'][1])
async def cmd_add_pair(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã."""
    import logging
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    logger.info(f"cmd_add_pair –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    user_states[chat_id] = UserState(current_action='selecting_base')
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'selecting_base' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    keyboard = get_base_coin_keyboard()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:",
        reply_markup=keyboard
    )
    logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

@rate_limit(calls=COMMAND_LIMITS['normal'][0], period=COMMAND_LIMITS['normal'][1])
async def handle_coin_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç—ã."""
    import logging
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id)
    selected_coin = update.message.text
    
    logger.info(f"handle_coin_selection –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º: '{selected_coin}'")
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{selected_coin}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
    if not state or not state.current_action or state.current_action not in ['selecting_base', 'selecting_quote']:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state.current_action if state else 'None'})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if state.is_loading:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã –∏ –Ω–∞–∑–∞–¥
    if selected_coin in ["–û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"]:
        user_states[chat_id] = UserState()
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
        
    if state.current_action == 'selecting_base':
        state.selected_base = selected_coin
        state.current_action = 'selecting_quote'
        
        keyboard = get_quote_coin_keyboard(selected_coin)
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {selected_coin}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ç–∏—Ä—É–µ–º—É—é –≤–∞–ª—é—Ç—É:",
            reply_markup=keyboard
        )
        
    elif state.current_action == 'selecting_quote':
        state.selected_quote = selected_coin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞
        if chat_id in user_settings:
            for existing_pair in user_settings[chat_id]:
                if (existing_pair.base == state.selected_base and 
                    existing_pair.quote == selected_coin):
                    await update.message.reply_text(
                        f"‚ùå –ü–∞—Ä–∞ {state.selected_base}/{selected_coin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_main_keyboard()
                    )
                    user_states[chat_id] = UserState()
                    return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –±–µ–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        new_pair = CryptoPair(
            base=state.selected_base,
            quote=selected_coin,
            min_price=None,
            max_price=None
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in user_settings:
            user_settings[chat_id] = []
        user_settings[chat_id].append(new_pair)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await start_price_monitoring(chat_id, new_pair.base, new_pair.quote, context.bot)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ –ü–∞—Ä–∞ {new_pair.base}/{new_pair.quote} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üí° –¶–µ–Ω–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
            f"üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–∏ –ø–∞—Ä—ã'\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[chat_id] = UserState()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(asyncio.to_thread(save_user_data))


@rate_limit(calls=COMMAND_LIMITS['quick'][0], period=COMMAND_LIMITS['quick'][1])
async def cmd_my_pairs(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä."""
    chat_id = update.effective_chat.id
    pairs = user_settings.get(chat_id, [])
    
    if not pairs:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–∞—Ö
    pairs_text = "üìä –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:\n\n"
    for i, pair in enumerate(pairs, 1):
        pairs_text += f"{i}. {pair.base}/{pair.quote}"
        if pair.min_price is not None or pair.max_price is not None:
            pairs_text += " üìä"
        pairs_text += "\n"
    
    pairs_text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    keyboard = get_pairs_list_keyboard(pairs)
    await update.message.reply_text(
        pairs_text,
        reply_markup=keyboard
    )

@rate_limit(calls=COMMAND_LIMITS['normal'][0], period=COMMAND_LIMITS['normal'][1])
async def handle_range_setting(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω."""
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    state = user_states.get(chat_id)
    
    if not state or state.current_action != 'setting_range':
        return
    
    price_input = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if price_input == "–û—Ç–º–µ–Ω–∞":
        user_states[chat_id] = UserState()
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
    is_valid, price, error_message = validate_price(price_input)
    
    if not is_valid and price_input != '-':
        await update.message.reply_text(
            f"‚ùå {error_message}. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
        )
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    if state.range_min is None:
        state.range_min = price
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        symbol = f"{state.selected_base}{state.selected_quote}".upper()
        tracking_key = (chat_id, symbol)
        
        from models import last_prices
        if tracking_key in last_prices:
            formatted_price = f"{last_prices[tracking_key]:.8f}"
            price_text = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: `{formatted_price}`"
        else:
            price_text = "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await update.message.reply_text(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price_input}\n\n"
            f"{price_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            parse_mode='Markdown'
        )
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    state.range_max = price
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if state.range_min is not None and state.range_max is not None:
        if state.range_min >= state.range_max:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_main_keyboard()
            )
            user_states[chat_id] = UserState()
            return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pairs = user_settings.get(chat_id, [])
    for pair in pairs:
        if pair.base == state.selected_base and pair.quote == state.selected_quote:
            pair.min_price = state.range_min
            pair.max_price = state.range_max
            break
        
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    symbol = f"{state.selected_base}{state.selected_quote}".upper()
    tracking_key = (chat_id, symbol)
    from models import alert_tracking
    if tracking_key in alert_tracking:
        alert_tracking[tracking_key]["alerted"] = False
        alert_tracking[tracking_key]["last_price"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        logger.info(f"–°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {symbol} –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    range_text = ""
    if state.range_min is not None:
        range_text += f"\n–ú–∏–Ω–∏–º—É–º: {state.range_min}"
    if state.range_max is not None:
        range_text += f"\n–ú–∞–∫—Å–∏–º—É–º: {state.range_max}"
        
    await update.message.reply_text(
        f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è {state.selected_base}/{state.selected_quote} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!{range_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[chat_id] = UserState()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(asyncio.to_thread(save_user_data))

@rate_limit(calls=COMMAND_LIMITS['quick'][0], period=COMMAND_LIMITS['quick'][1])
async def cmd_cached_price(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≤—Å–µ—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)."""
    import logging
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    pairs = user_settings.get(chat_id, [])
    
    logger.info(f"cmd_cached_price –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    if not pairs:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    prices_text = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã:\n\n"
    
    from models import last_prices  # –î–æ–±–∞–≤–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω
    
    for i, pair in enumerate(pairs, 1):
        symbol = f"{pair.base}{pair.quote}".upper()
        tracking_key = (chat_id, symbol)
        
        if tracking_key in last_prices:
            formatted_price = f"{last_prices[tracking_key]:.8f}"
            prices_text += f"{i}. {pair.base}/{pair.quote}: `{formatted_price}`\n"
        else:
            prices_text += f"{i}. {pair.base}/{pair.quote}: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...\n"
    
    prices_text += "\nüí° –ú–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º\nüí° –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await update.message.reply_text(
        prices_text,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

@rate_limit(calls=COMMAND_LIMITS['normal'][0], period=COMMAND_LIMITS['normal'][1])
async def handle_price_check(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    import logging
    logger = logging.getLogger(__name__)
    
    chat_id = update.effective_chat.id
    text = update.message.text
    logger.info(f"üîç handle_price_check –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
    logger.debug(f"handle_price_check –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text in ["üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", "üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"]:
        logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await cmd_add_pair(update, context)
        return
    elif text == "üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å":
        logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await cmd_cached_price(update, context)
        return
    elif text == "üëÅÔ∏è –ú–æ–∏ –ø–∞—Ä—ã":
        logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –ø–∞—Ä—ã' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await cmd_my_pairs(update, context)
        return
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await cmd_help(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–æ - —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã —Å—Ä–∞–∑—É)

@rate_limit(calls=COMMAND_LIMITS['normal'][0], period=COMMAND_LIMITS['normal'][1])
async def handle_callback_query(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫."""
    import logging
    logger = logging.getLogger(__name__)
    
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data
    
    logger.info(f"üîò –ü–æ–ª—É—á–µ–Ω callback: '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    try:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        
        if data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            keyboard = get_main_keyboard()
            
            try:
                await query.edit_message_text(
                    text=welcome_text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await query.message.reply_text(
                    text=welcome_text,
                    reply_markup=keyboard
                )
                
        elif data == "back_to_pairs":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä
            pairs = user_settings.get(chat_id, [])
            if not pairs:
                await query.edit_message_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            pairs_text = "üìä –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:\n\n"
            for i, pair in enumerate(pairs, 1):
                pairs_text += f"{i}. {pair.base}/{pair.quote}"
                if pair.min_price is not None or pair.max_price is not None:
                    pairs_text += " üìä"
                pairs_text += "\n"
                
            pairs_text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            keyboard = get_pairs_list_keyboard(pairs)
            await query.edit_message_text(
                text=pairs_text,
                reply_markup=keyboard
            )
            
        elif data.startswith("pair_"):
            # –í—ã–±–æ—Ä –ø–∞—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            pair_index = int(data.split("_")[1])
            pairs = user_settings.get(chat_id, [])
            
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã {pair_index} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã {pair_index} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            if 0 <= pair_index < len(pairs):
                pair = pairs[pair_index]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è
                pair_info = f"üìä –ü–∞—Ä–∞: {pair.base}/{pair.quote}\n\n"
                if pair.min_price is not None:
                    pair_info += f"–ú–∏–Ω–∏–º—É–º: {pair.min_price:.8f}\n"
                else:
                    pair_info += "–ú–∏–Ω–∏–º—É–º: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                if pair.max_price is not None:
                    pair_info += f"–ú–∞–∫—Å–∏–º—É–º: {pair.max_price:.8f}\n"
                else:
                    pair_info += "–ú–∞–∫—Å–∏–º—É–º: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                
                pair_info += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                keyboard = get_pair_actions_keyboard(pair_index)
                logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–∞—Ä—ã {pair.base}/{pair.quote}")
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–∞—Ä—ã {pair.base}/{pair.quote}")
                
                await query.edit_message_text(
                    text=pair_info,
                    reply_markup=keyboard
                )
            else:
                logger.warning(f"‚ùå –ü–∞—Ä–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {pair_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                logger.error(f"–ü–∞—Ä–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {pair_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                await query.answer("‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        elif data.startswith("set_range_"):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø–∞—Ä—ã
            pair_index = int(data.split("_")[2])
            pairs = user_settings.get(chat_id, [])
            
            if 0 <= pair_index < len(pairs):
                pair = pairs[pair_index]
                user_states[chat_id] = UserState(
                    current_action='setting_range',
                    selected_base=pair.base,
                    selected_quote=pair.quote
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                symbol = f"{pair.base}{pair.quote}".upper()
                tracking_key = (chat_id, symbol)
                
                from models import last_prices
                if tracking_key in last_prices:
                    formatted_price = f"{last_prices[tracking_key]:.8f}"
                    price_text = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: `{formatted_price}`"
                else:
                    price_text = "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
                
                await query.edit_message_text(
                    f"üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è {pair.base}/{pair.quote}\n\n"
                    f"{price_text}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                    reply_markup=get_cancel_inline_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await query.answer("‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        elif data.startswith("view_price_"):
            # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–∞—Ä—ã
            pair_index = int(data.split("_")[2])
            pairs = user_settings.get(chat_id, [])
            
            if 0 <= pair_index < len(pairs):
                pair = pairs[pair_index]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                symbol = f"{pair.base}{pair.quote}".upper()
                tracking_key = (chat_id, symbol)
                
                from models import last_prices
                if tracking_key in last_prices:
                    formatted_price = f"{last_prices[tracking_key]:.8f}"
                    price_text = (
                        f"üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {pair.base}/{pair.quote}:\n\n"
                        f"`{formatted_price}`\n\n"
                        f"üí° –ú–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º\n"
                        f"üí° –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
                else:
                    price_text = (
                        f"üí∞ –¶–µ–Ω–∞ {pair.base}/{pair.quote}:\n\n"
                        f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...\n\n"
                        f"üí° –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
                
                await query.edit_message_text(
                    text=price_text,
                    reply_markup=get_pair_actions_keyboard(pair_index),
                    parse_mode='Markdown'
                )
            else:
                await query.answer("‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        elif data.startswith("delete_pair_"):
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
            pair_index = int(data.split("_")[2])
            pairs = user_settings.get(chat_id, [])
            
            if 0 <= pair_index < len(pairs):
                pair = pairs[pair_index]
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–¥–∞–ª—è–µ–º –ø–∞—Ä—É
                await stop_price_monitoring(chat_id, pair.base, pair.quote)
                pairs.pop(pair_index)
                
                await query.edit_message_text(
                    f"‚úÖ –ü–∞—Ä–∞ {pair.base}/{pair.quote} —É–¥–∞–ª–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_pairs_list_keyboard(pairs)
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                asyncio.create_task(asyncio.to_thread(save_user_data))
            else:
                await query.answer("‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
