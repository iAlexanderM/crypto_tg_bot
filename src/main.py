#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞.
"""
import asyncio
import signal
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from telegram import Update
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from config import TELEGRAM_BOT_TOKEN
from handlers import (
    cmd_start, cmd_help, cmd_add_pair, cmd_my_pairs, cmd_cached_price,
    handle_coin_selection, handle_range_setting,
    handle_price_check, handle_callback_query
)
from keyboards import get_main_keyboard
from models import user_settings, user_states
from monitoring import start_price_monitoring
from storage import load_user_data, save_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
log_file = os.getenv('LOG_FILE', 'bot.log')
max_log_size = int(os.getenv('MAX_LOG_SIZE_MB', '10')) * 1024 * 1024  # 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
backup_count = int(os.getenv('LOG_BACKUP_COUNT', '5'))  # 5 —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

from logging.handlers import RotatingFileHandler

# –°–æ–∑–¥–∞–µ–º —Ä–æ—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = RotatingFileHandler(
    log_file, 
    maxBytes=max_log_size, 
    backupCount=backup_count,
    encoding='utf-8'
)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=getattr(logging, log_level, logging.INFO),
    handlers=[file_handler, console_handler]
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
def cleanup_old_logs():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    try:
        import glob
        import time
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        cutoff_time = time.time() - (7 * 24 * 60 * 60)
        log_files = glob.glob("*.log.*")
        
        for log_file in log_files:
            try:
                if os.path.getmtime(log_file) < cutoff_time:
                    os.remove(log_file)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥ —Ñ–∞–π–ª: {log_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {log_file}: {e}")
                
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

# –°–æ–±—ã—Ç–∏–µ –¥–ª—è graceful shutdown (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)

async def start_existing_pairs_monitoring(application: Application) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä...')
    
    if not user_settings:
        logger.info('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
        return
    
    for chat_id, pairs in user_settings.items():
        if not pairs:
            continue
            
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: {len(pairs)} –ø–∞—Ä')
        for pair in pairs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            symbol = f"{pair.base}{pair.quote}".upper()
            tracking_key = (chat_id, symbol)
            
            from models import websocket_connections
            if tracking_key not in websocket_connections:
                logger.info(f'–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—ã {pair.base}/{pair.quote} –¥–ª—è —á–∞—Ç–∞ {chat_id}')
                await start_price_monitoring(chat_id, pair.base, pair.quote, application.bot)
            else:
                logger.info(f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—ã {pair.base}/{pair.quote} –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω')

async def run_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...')
        
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_user_data()
    logger.info('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_BOT_TOKEN[:10]}...")
    logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_BOT_TOKEN[:10]}...")

    # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def simple_handler(update: Update, context: CallbackContext) -> None:
        """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if update.message:
            text = update.message.text
            chat_id = update.effective_chat.id
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: '{text}' –æ—Ç {chat_id}")
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ: '{text}' –æ—Ç {chat_id}")
            
            if text == "/start":
                await cmd_start(update, context)
            elif text == "/help":
                await cmd_help(update, context)
            elif text == "/addpair":
                await cmd_add_pair(update, context)
            elif text == "/mypairs":
                await cmd_my_pairs(update, context)
            elif text == "/price":
                await cmd_cached_price(update, context)
            elif text in ["üìä –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", "üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å", "üëÅÔ∏è –ú–æ–∏ –ø–∞—Ä—ã", "‚ùì –ü–æ–º–æ—â—å"]:
                await handle_price_check(update, context)
            elif text.replace(".", "").replace("-", "").isdigit() or text == "-" or text == "–û—Ç–º–µ–Ω–∞":
                await handle_range_setting(update, context)
            else:
                await handle_coin_selection(update, context)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.ALL, simple_handler))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
    logger.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä
    await start_existing_pairs_monitoring(application)
    
    logger.info('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...')
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—á–µ—Ä–µ–¥–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤—Ä—É—á–Ω—É—é
        await application.updater.start_polling(
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=False,  # –ù–ï –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å!
            timeout=10,
            read_timeout=10,
            write_timeout=10,
            connect_timeout=10
        )
        
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Event().wait()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
        raise
    finally:
        await application.stop()
        await application.shutdown()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...')
    save_user_data()
    logger.info('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.')
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞."""
    logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_bot())
    except KeyboardInterrupt:
        logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
        try:
            from utils import close_http_session
            loop.run_until_complete(close_http_session())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP —Å–µ—Å—Å–∏–∏: {e}")
        loop.close()

if __name__ == "__main__":
    main()